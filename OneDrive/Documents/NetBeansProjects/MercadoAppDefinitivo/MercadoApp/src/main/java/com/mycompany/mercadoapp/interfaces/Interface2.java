/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.mycompany.mercadoapp.interfaces;

import com.mycompany.mercadoapp.funcionalidades.Grafo;
import com.mycompany.mercadoapp.funcionalidades.Parada;
import java.awt.BorderLayout;
import java.awt.Dimension;
import javax.swing.JOptionPane;
import org.graphstream.graph.implementations.SingleGraph;
import org.graphstream.ui.swingViewer.ViewPanel;
import org.graphstream.ui.view.Viewer;
import org.graphstream.ui.view.ViewerListener;
import org.graphstream.ui.view.ViewerPipe;
import org.json.JSONArray;
import org.json.JSONObject;

/**
 * Clase de la interfaz gráfica principal que representa una ventana de
 * visualización de un grafo de paradas de transporte y permite agregar nuevas
 * líneas y modificar parámetros de búsqueda. Esta interfaz ofrece opciones para
 * agregar líneas, seleccionar el tipo de búsqueda (BFS o DFS), y configurar la
 * cobertura del grafo.
 *
 * @author erick
 */
public class Interface2 extends javax.swing.JFrame {

    private Interface p1; // Instancia de la interfaz principal de la aplicación
    private JSONObject json; // Objeto JSON que contiene el mapa y datos de líneas
    private int cobertura = 1; // Alcance de la cobertura de cada nodo en el grafo
    private Grafo customGraph; // Instancia de Grafo para representar y manipular el grafo de paradas

    /**
     * Crea una nueva instancia de Interface2 y configura el mapa según el
     * objeto JSON.
     *
     * @param json Objeto JSON que contiene el mapa de paradas y líneas
     */
    public Interface2(JSONObject json) {
        initComponents();
        this.setVisible(true);
        this.setLocationRelativeTo(null);
        this.json = json;
        String nombreMapa = json.keys().next(); // Esto obtiene la primera clave directamente

        System.out.println("Mapa:");
        System.out.println(nombreMapa);
        jLabelMapa.setText("Mapa: " + nombreMapa);

        cobertura = switch (nombreMapa) {
            case "Transmilenio" ->
                10;
            case "Metro de Caracas" ->
                3;
            default ->
                1;
        }; // Termina la ejecución de este caso

        jLabelCobertura.setText(String.valueOf(cobertura));
        jRadioButtonBfs.setSelected(true);
        CargarMapa();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroupAlgoritmoBusqueda = new javax.swing.ButtonGroup();
        jDialogAgregarLinea = new javax.swing.JDialog();
        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        JComboBoxParadas = new javax.swing.JComboBox<>();
        jLabel6 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextAreaNuevasParadas = new javax.swing.JTextArea();
        jButtonGuardarNuevaLinea = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        BtnReturn = new javax.swing.JButton();
        jLabelMapa = new javax.swing.JLabel();
        jPanelMapa = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jButtonCambaiarCobertura = new javax.swing.JButton();
        jLabelCobertura = new javax.swing.JLabel();
        jRadioButtonBfs = new javax.swing.JRadioButton();
        jRadioButtonDfs = new javax.swing.JRadioButton();
        jLabel3 = new javax.swing.JLabel();
        jButtonAgregarLinea = new javax.swing.JButton();

        jDialogAgregarLinea.setSize(new java.awt.Dimension(800, 600));

        jLabel1.setText("jLabel1");
        jPanel2.add(jLabel1);

        jDialogAgregarLinea.getContentPane().add(jPanel2, java.awt.BorderLayout.CENTER);

        jPanel4.setBackground(new java.awt.Color(214, 214, 38));
        jPanel4.setPreferredSize(new java.awt.Dimension(423, 327));
        jPanel4.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel4.setFont(new java.awt.Font("Segoe UI Variable", 1, 18)); // NOI18N
        jLabel4.setText("Agregar Linea");
        jPanel4.add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 10, 140, 30));

        jLabel5.setFont(new java.awt.Font("Segoe UI Variable", 1, 12)); // NOI18N
        jLabel5.setText("Seleccione una parada de conexión:");
        jPanel4.add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 60, -1, -1));

        JComboBoxParadas.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        JComboBoxParadas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                JComboBoxParadasActionPerformed(evt);
            }
        });
        jPanel4.add(JComboBoxParadas, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 90, 200, -1));

        jLabel6.setFont(new java.awt.Font("Segoe UI Variable", 1, 12)); // NOI18N
        jLabel6.setText("Agregue la secuencia de nuevas paradas separadas:");
        jPanel4.add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 140, -1, -1));

        jTextAreaNuevasParadas.setColumns(20);
        jTextAreaNuevasParadas.setRows(5);
        jTextAreaNuevasParadas.setText("Parada1\nParada2\nParada3");
        jScrollPane1.setViewportView(jTextAreaNuevasParadas);

        jPanel4.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 170, 730, 210));

        jButtonGuardarNuevaLinea.setBackground(new java.awt.Color(226, 226, 165));
        jButtonGuardarNuevaLinea.setFont(new java.awt.Font("Segoe UI Variable", 1, 14)); // NOI18N
        jButtonGuardarNuevaLinea.setText("Agregar");
        jButtonGuardarNuevaLinea.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonGuardarNuevaLineaActionPerformed(evt);
            }
        });
        jPanel4.add(jButtonGuardarNuevaLinea, new org.netbeans.lib.awtextra.AbsoluteConstraints(660, 410, 100, 40));

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, 800, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, 600, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        jDialogAgregarLinea.getContentPane().add(jPanel3, java.awt.BorderLayout.PAGE_START);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(222, 222, 113));
        setMinimumSize(new java.awt.Dimension(1280, 720));
        setPreferredSize(new java.awt.Dimension(800, 600));
        setSize(new java.awt.Dimension(1280, 720));
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel1.setBackground(new java.awt.Color(207, 207, 58));
        jPanel1.setMinimumSize(new java.awt.Dimension(800, 600));
        jPanel1.setPreferredSize(new java.awt.Dimension(800, 600));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        BtnReturn.setBackground(new java.awt.Color(238, 238, 98));
        BtnReturn.setText("Regresar");
        BtnReturn.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        BtnReturn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BtnReturnActionPerformed(evt);
            }
        });
        jPanel1.add(BtnReturn, new org.netbeans.lib.awtextra.AbsoluteConstraints(1130, 650, 100, 40));

        jLabelMapa.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabelMapa.setText("MAPA");
        jPanel1.add(jLabelMapa, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 10, 930, 30));
        jPanel1.add(jPanelMapa, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 50, 1200, 560));

        jLabel2.setText("Algoritmo de Busqueda");
        jPanel1.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 620, -1, -1));

        jButtonCambaiarCobertura.setText("Cambiar");
        jButtonCambaiarCobertura.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCambaiarCoberturaActionPerformed(evt);
            }
        });
        jPanel1.add(jButtonCambaiarCobertura, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 640, -1, -1));

        jLabelCobertura.setFont(new java.awt.Font("Helvetica Neue", 0, 18)); // NOI18N
        jPanel1.add(jLabelCobertura, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 640, 20, 30));

        buttonGroupAlgoritmoBusqueda.add(jRadioButtonBfs);
        jRadioButtonBfs.setText("BFS");
        jRadioButtonBfs.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButtonBfsActionPerformed(evt);
            }
        });
        jPanel1.add(jRadioButtonBfs, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 640, -1, -1));

        buttonGroupAlgoritmoBusqueda.add(jRadioButtonDfs);
        jRadioButtonDfs.setText("DFS");
        jRadioButtonDfs.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButtonDfsActionPerformed(evt);
            }
        });
        jPanel1.add(jRadioButtonDfs, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 660, -1, -1));

        jLabel3.setText("Radio de cobertura");
        jPanel1.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 620, -1, -1));

        jButtonAgregarLinea.setBackground(new java.awt.Color(238, 238, 98));
        jButtonAgregarLinea.setText("Agregar linea");
        jButtonAgregarLinea.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jButtonAgregarLinea.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAgregarLineaActionPerformed(evt);
            }
        });
        jPanel1.add(jButtonAgregarLinea, new org.netbeans.lib.awtextra.AbsoluteConstraints(370, 630, 120, 40));

        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 0, 1280, 720));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    public void setP1(Interface p1) {
        this.p1 = p1;
    }

    /**
     * Inicializa el componente gráfico y carga el mapa en el panel principal.
     */
    private void CargarMapa() {

        String primeraClave = json.keys().next(); // Esto obtiene la primera clave directamente
        JSONArray lines = json.getJSONArray(primeraClave); // Obtener el JSONArray de esa clave
        String transferColor = "black";

        customGraph = new Grafo(1000);

        for (int i = 0; i < lines.length(); i++) {
            String lineColor = "black";

            JSONObject line = lines.getJSONObject(i);
            for (String lineName : line.keySet()) {
                JSONArray stations = line.getJSONArray(lineName);
                Parada paradaPrevia = null;

                for (int j = 0; j < stations.length(); j++) {
                    Object stationObj = stations.get(j);
                    String station = null;
                    String transferStation = null;

                    if (stationObj instanceof String) {
                        station = (String) stationObj;
                    } else if (stationObj instanceof JSONObject) {
                        JSONObject transfer = (JSONObject) stationObj;
                        for (String from : transfer.keySet()) {
                            station = from;
                            transferStation = transfer.getString(from);
                        }
                    }

                    if (station != null) {
                        Parada paradaActual = customGraph.addStation(station, lineColor, 100); // lol aqui :)
                        if (paradaPrevia != null) {
                            customGraph.addConnection(paradaPrevia, paradaActual);
                        }
                        paradaPrevia = paradaActual;
                    }

                    if (transferStation != null) {
                        Parada transferStationObj = customGraph.addStation(transferStation, transferColor, 10);
                        customGraph.addConnection(paradaPrevia, transferStationObj);
                    }
                }
            }
        }

//        customGraph.displayWithGraphStream();
        customGraph.graph = new SingleGraph("Subway Network");

        for (int i = 0; i < customGraph.paradasCount; i++) {
            Parada station = customGraph.paradas[i];
            customGraph.graph.addNode(station.id).setAttribute("ui.label", station.id);
            customGraph.graph.getNode(station.id).setAttribute("ui.style", "fill-color: " + station.colorLinea + "; size: 20px;");
        }

        for (int i = 0; i < customGraph.paradasCount; i++) {
            Parada station = customGraph.paradas[i];
            for (int j = 0; j < station.paradasConectadasCount; j++) {
                Parada neighbor = station.paradasConectadas[j];
                String edgeId = station.id + "-" + neighbor.id;
                String reverseEdgeId = neighbor.id + "-" + station.id;
                if (customGraph.graph.getEdge(edgeId) == null && customGraph.graph.getEdge(reverseEdgeId) == null) {
                    customGraph.graph.addEdge(edgeId, station.id, neighbor.id, false);
                }
            }
        }

        Viewer viewer = customGraph.graph.display();
        viewer.enableAutoLayout();
        viewer.getDefaultView().getCamera().setViewPercent(1.0);

        // Añadir el ViewPanel al jPanelMapa
        ViewPanel viewPanel = viewer.addDefaultView(false);
        viewPanel.setPreferredSize(new Dimension(1200, 600));

        jPanelMapa.removeAll();
        jPanelMapa.add(viewPanel, BorderLayout.CENTER);
        jPanelMapa.revalidate();
        jPanelMapa.repaint();

        // Configurar ViewerPipe para recibir eventos de clic en nodos
        ViewerPipe viewerPipe = viewer.newViewerPipe();
        viewerPipe.addViewerListener(new ViewerListener() {
            @Override
            public void viewClosed(String id) {
                // Manejar cierre de vista si es necesario
            }

            @Override
            public void buttonPushed(String id) {
                System.out.println("Nodo clickeado: " + id);
                Parada parada = customGraph.findStation(id);
                if (parada != null) {
                    System.out.println("Estación seleccionada: " + parada.id);
                    // Reiniciar el color de todos los nodos a negro antes de aplicar el nuevo rango
//                    customGraph.resetNodeColors();

// Añadir la parada seleccionada al arreglo y actualizar su color a verde
                    customGraph.agregarParadaSeleccionada(parada.id);
                    customGraph.graph.getNode(parada.id).setAttribute("ui.style", "fill-color: green; size: 20px;");

                    Parada[] reachableStations = jRadioButtonBfs.isSelected() ? parada.getParadasCubiertasBfs(cobertura) : parada.getParadasCubiertasDfs(cobertura);
                    System.out.println("Estaciones dentro de " + cobertura + " posiciones: ");

                    for (Parada station : reachableStations) {
                        if (station != null && !customGraph.esParadaSeleccionada(station.id)) {  // Evitar mostrar la estación seleccionada como parte de su propio alcance
                            System.out.println(" - " + station.id);
                            // Evitar modificar el color de las paradas ya seleccionadas

                            customGraph.graph.getNode(station.id).setAttribute("ui.style", "fill-color: blue; size: 20px;");
                        }
                    }
                }

            }

            @Override
            public void buttonReleased(String id) {
                System.out.println("Despues de presionar boton...");
//               int sucursalesNoCubiertas = customGraph.obtenerTotalParadasNoCubiertas(cobertura);
//               System.out.println("Sucursales no cubiertas" + String.valueOf(sucursalesNoCubiertas));
//               customGraph.sugerirParadasParaCobertura(cobertura);
                // Acción opcional al soltar el clic del mouse en el nodo
            }
        });

        // Configuración de un Timer para gestionar los eventos de ViewerPipe
        new javax.swing.Timer(50, e -> viewerPipe.pump()).start();

        // Verificar Grafo
        System.out.println("Verificar Grafo");
        for (int i = 0; i < customGraph.paradasCount; i++) {
            Parada parada = customGraph.paradas[i];
            System.out.print("Parada: " + parada.id + " conectada a: ");
            for (int j = 0; j < parada.paradasConectadasCount; j++) {
                System.out.print(parada.paradasConectadas[j].id + " ");
            }
            System.out.println();
        }
    }

    /**
     * Vuelve a la interfaz principal de la aplicación.
     *
     * @param evt Evento de acción generado al hacer clic en el botón de retorno
     */
    private void BtnReturnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BtnReturnActionPerformed
        p1.setVisible(true);
        this.setLocationRelativeTo(null);
        this.setVisible(false);

    }//GEN-LAST:event_BtnReturnActionPerformed

    /**
     * Cambia la cobertura de las paradas según el valor ingresado por el
     * usuario.
     *
     * @param evt Evento de acción generado al hacer clic en el botón de cambio
     * de cobertura
     */
    private void jButtonCambaiarCoberturaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCambaiarCoberturaActionPerformed
        String inputValue = JOptionPane.showInputDialog("Ingrese la distancia máxima para paradas alcanzables:");
        cobertura = Integer.parseInt(inputValue);
        jLabelCobertura.setText(String.valueOf(cobertura));

        customGraph.limpiarParadasSeleccionadas();
    }//GEN-LAST:event_jButtonCambaiarCoberturaActionPerformed

    /**
     * Método para manejar la selección del algoritmo de búsqueda BFS.
     *
     * @param evt Evento de acción generado al seleccionar el radio button BFS
     */
    private void jRadioButtonBfsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButtonBfsActionPerformed
        customGraph.limpiarParadasSeleccionadas();
    }//GEN-LAST:event_jRadioButtonBfsActionPerformed

    /**
     * Método para manejar la selección del algoritmo de búsqueda DFS.
     *
     * @param evt Evento de acción generado al seleccionar el radio button DFS
     */
    private void jRadioButtonDfsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButtonDfsActionPerformed
        customGraph.limpiarParadasSeleccionadas();
    }//GEN-LAST:event_jRadioButtonDfsActionPerformed
    /**
     * Abre el diálogo para agregar una nueva línea al grafo, cargando las
     * paradas existentes en un JComboBox.
     *
     * @param evt Evento de acción generado al hacer clic en el botón de agregar
     * línea
     */
    private void jButtonAgregarLineaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAgregarLineaActionPerformed
        String[] paradas = customGraph.obtenerListadoParadas();
        JComboBoxParadas.setModel(new javax.swing.DefaultComboBoxModel<>(paradas));
        jDialogAgregarLinea.setModal(true);
        jDialogAgregarLinea.setLocationRelativeTo(this);
        jDialogAgregarLinea.setVisible(true);  // Abre el diálogo y espera a que se cierre

    }//GEN-LAST:event_jButtonAgregarLineaActionPerformed


    private void JComboBoxParadasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_JComboBoxParadasActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_JComboBoxParadasActionPerformed

    /**
     * Guarda una nueva línea con paradas adicionales en el grafo y cierra el
     * diálogo de agregar línea.
     *
     * @param evt Evento de acción generado al hacer clic en el botón de guardar
     * nueva línea
     */

    private void jButtonGuardarNuevaLineaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonGuardarNuevaLineaActionPerformed
        jDialogAgregarLinea.setVisible(false);
        jDialogAgregarLinea.setModal(false);
        String contenido = jTextAreaNuevasParadas.getText(); // Obtiene todo el texto como una sola cadena
        // Divide el texto en un array de String[], donde cada elemento es una línea
        String[] nuevasParadas = contenido.split("\\r?\\n");
        customGraph.agregarLineaNueva(JComboBoxParadas.getSelectedItem().toString(), nuevasParadas, "#ff7f0e");
    }//GEN-LAST:event_jButtonGuardarNuevaLineaActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton BtnReturn;
    private javax.swing.JComboBox<String> JComboBoxParadas;
    private javax.swing.ButtonGroup buttonGroupAlgoritmoBusqueda;
    private javax.swing.JButton jButtonAgregarLinea;
    private javax.swing.JButton jButtonCambaiarCobertura;
    private javax.swing.JButton jButtonGuardarNuevaLinea;
    private javax.swing.JDialog jDialogAgregarLinea;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabelCobertura;
    private javax.swing.JLabel jLabelMapa;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanelMapa;
    private javax.swing.JRadioButton jRadioButtonBfs;
    private javax.swing.JRadioButton jRadioButtonDfs;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea jTextAreaNuevasParadas;
    // End of variables declaration//GEN-END:variables

}
