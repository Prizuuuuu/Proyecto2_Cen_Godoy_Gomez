/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.mycompany.mercadoapp.interfaces;

import java.io.BufferedReader;
import javax.swing.JFileChooser;
import java.io.IOException;
import java.io.File;
import java.io.FileReader;
import org.json.JSONObject;

/**
 * Clase Interface que representa la ventana principal de la aplicación. Permite
 * al usuario cargar un archivo JSON con una red de transporte, visualizar su
 * contenido y navegar a una segunda interfaz que representa el grafo de las
 * paradas de transporte.
 *
 * La clase proporciona opciones para seleccionar un archivo JSON y mostrar su
 * contenido en un campo de texto. También se encarga de enviar el contenido
 * JSON a la siguiente interfaz.
 *
 * @author erick
 */
public class Interface extends javax.swing.JFrame {

    private JSONObject json; // Objeto JSON que contiene los datos cargados del archivo

    /**
     * Crea una nueva instancia de Interface y configura la ventana principal.
     */
    public Interface() {
        initComponents();
        this.setVisible(true);
        this.setLocationRelativeTo(null);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        Path = new javax.swing.JTextPane();
        Show1 = new javax.swing.JButton();
        Download = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        Contenido = new javax.swing.JTextArea();
        jLabel3 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBounds(new java.awt.Rectangle(0, 25, 1280, 720));
        setMinimumSize(new java.awt.Dimension(1280, 720));
        setPreferredSize(new java.awt.Dimension(1280, 720));
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel1.setBackground(new java.awt.Color(213, 213, 82));
        jPanel1.setMinimumSize(new java.awt.Dimension(800, 600));
        jPanel1.setPreferredSize(new java.awt.Dimension(800, 600));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel2.setFont(new java.awt.Font("Tw Cen MT Condensed Extra Bold", 1, 24)); // NOI18N
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("COBERTURA DE SUCURSALES");
        jPanel1.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 20, 1160, 50));

        jLabel1.setFont(new java.awt.Font("Perpetua Titling MT", 1, 12)); // NOI18N
        jLabel1.setText("Resultado del JSON");
        jPanel1.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 180, 450, 30));

        Path.setEditable(false);
        Path.setFont(new java.awt.Font("Serif", 0, 14)); // NOI18N
        jScrollPane1.setViewportView(Path);

        jPanel1.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 110, 200, 30));

        Show1.setBackground(new java.awt.Color(229, 229, 165));
        Show1.setText("Siguiente");
        Show1.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        Show1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Show1ActionPerformed(evt);
            }
        });
        jPanel1.add(Show1, new org.netbeans.lib.awtextra.AbsoluteConstraints(1050, 640, 130, 30));

        Download.setBackground(new java.awt.Color(229, 229, 165));
        Download.setText("Cargar");
        Download.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        Download.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DownloadActionPerformed(evt);
            }
        });
        jPanel1.add(Download, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 110, 130, 30));

        Contenido.setEditable(false);
        Contenido.setColumns(20);
        Contenido.setFont(new java.awt.Font("Verdana", 0, 14)); // NOI18N
        Contenido.setRows(5);
        jScrollPane2.setViewportView(Contenido);

        jPanel1.add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 210, 1130, 390));

        jLabel3.setFont(new java.awt.Font("Perpetua Titling MT", 1, 12)); // NOI18N
        jLabel3.setText("Primer paso: cargue un archivo json con la red de transporte");
        jPanel1.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 80, 450, 30));

        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 0, 1280, 720));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Evento de acción que se ejecuta cuando se presiona el botón "Siguiente".
     * Abre una nueva ventana Interface2 y oculta la ventana actual.
     *
     * @param evt Evento de acción generado al presionar el botón "Siguiente"
     */
    private void Show1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Show1ActionPerformed
        Interface2 p2 = new Interface2(json);
        p2.setP1(this);
        p2.setVisible(true);
        this.setVisible(false);
    }//GEN-LAST:event_Show1ActionPerformed
    /*
    private void DownloadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DownloadActionPerformed
        //Creamos el objeto JFileChooser.
        JFileChooser cargar = new JFileChooser();
        
        //Se crea un filtro para seleccionar los archivos .json
        
        //Se abre la ventana y se guarda la opci&oacuten seleccionada por el usuario
        int seleccionar = cargar.showOpenDialog(this);
        
        if(seleccionar == JFileChooser.APPROVE_OPTION){
            File archivo = cargar.getSelectedFile();
            
            this.Path.setText(archivo.getAbsolutePath());
            
            try (FileReader leer = new FileReader(archivo)){
                String cadena = "";
                int valor = leer.read();
                
                while(valor != -1){
                    cadena = cadena + (char) valor;
                    valor = leer.read();
                    
                }
                this.Contenido.setText(cadena);  
                
            } catch (IOException el) {
                //el.printStackTrace(); 
            } 
        }
    }//GEN-LAST:event_DownloadActionPerformed

    */

    /**
     * Evento de acción que se ejecuta cuando se presiona el botón "Cargar".
     * Permite seleccionar un archivo JSON y muestra su contenido en el área de
     * texto. También carga y guarda el JSON en el objeto `json` de la clase.
     *
     * @param evt Evento de acción generado al presionar el botón "Cargar"
     */
    private void DownloadActionPerformed(java.awt.event.ActionEvent evt) {
//     Creamos el objeto JFileChooser.
        JFileChooser cargar = new JFileChooser();

        // Se abre la ventana y se guarda la opción seleccionada por el usuario.
        int seleccionar = cargar.showOpenDialog(this);

        if (seleccionar == JFileChooser.APPROVE_OPTION) {
            File archivo = cargar.getSelectedFile();
            this.Path.setText(archivo.getAbsolutePath());

            // Lectura y parseo del JSON
            try (BufferedReader leer = new BufferedReader(new FileReader(archivo))) {
                StringBuilder contenidoJson = new StringBuilder();
                String linea;

                while ((linea = leer.readLine()) != null) {
                    System.out.println("Contenido linea:");
                    System.out.println(linea);

                    contenidoJson.append(linea);
                }

                // Parsear el JSON
                json = new JSONObject(contenidoJson.toString());

                // Guardar en una variable y mostrar en consola
//            String primeraClave = json.keys().next(); // Esto obtiene la primera clave directamente
//            JSONArray jsonArray = json.getJSONArray(primeraClave);
                String jsonLiteral = json.toString(4); // `4` para formato de impresión legible
                System.out.println("Contenido JSON:");
                System.out.println(jsonLiteral);

                // Mostrar en el componente de la UI
                this.Contenido.setText(jsonLiteral);

            } catch (IOException e) {
                e.printStackTrace();
            }
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Interface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Interface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Interface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Interface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new Interface().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextArea Contenido;
    private javax.swing.JButton Download;
    private javax.swing.JTextPane Path;
    private javax.swing.JButton Show1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    // End of variables declaration//GEN-END:variables
}
